install.packages("xgboost")
library(xgboost)
library(vtreat)
library(vtreat)
setwd("C:\\Development\\R\\DataCamp\\Regression Models")
bikesJuly <- read.csv("BikesJuly.csv")
bikesAugust <- read.csv("BikesAugust.csv")
# Create the treatment plan from bikesJuly (the training data)
treatplan <- designTreatmentsZ(bikesJuly, vars, verbose = FALSE)
# Use Gradient Boost Trees
# use xgb.cv to find the best number of trees to use in the model (the one with minimum RMSE)
# boost algorithm requires categorical variables to be treated as dummy variables
# therefore, we need to treat the data and to clean continuous variables from NA and Nan
# The outcome column
(outcome <- "cnt")
# The input columns
(vars <- c("hr", "holiday", "workingday", "weathersit", "temp", "atemp", "hum", "windspeed"))
# Create the treatment plan from bikesJuly (the training data)
treatplan <- designTreatmentsZ(bikesJuly, vars, verbose = FALSE)
treatplan
treatplan$scoreFrame
(newvars <- treatplan %>%
use_series(scoreFrame) %>%
filter(code %in% c("lev","clean")) %>%  # get the rows you care about
use_series(varName))
library(broom)
library(dplyr)
library(ggplot2)
library(tidyr)
library(nlme)
library(mgcv)
library(xgboost)
library(vtreat)
# Get the "clean" and "lev" variables from the scoreFrame
(newvars <- treatplan %>%
use_series(scoreFrame) %>%
filter(code %in% c("lev","clean")) %>%  # get the rows you care about
use_series(varName))           # get the varName column
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
(newvars <- treatplan %>%
use_series(scoreFrame) %>%
filter(code %in% c("lev","clean")) %>%  # get the rows you care about
use_series(varName))
#Non-linear models
library(broom)
library(dplyr)
library(ggplot2)
library(tidyr)
library(nlme)
library(mgcv)
library(xgboost)
library(vtreat)
library(magrittr)
setwd("C:\\Development\\R\\DataCamp\\Regression Models")
bikesJuly <- read.csv("BikesJuly.csv")
bikesAugust <- read.csv("BikesAugust.csv")
(newvars <- treatplan %>%
use_series(scoreFrame) %>%
filter(code %in% c("lev","clean")) %>%  # get the rows you care about
use_series(varName))
# Prepare the training data
bikesJuly.treat <- prepare(treatplan, bikesJuly,  varRestriction = newvars)
# Prepare the test data
bikesAugust.treat <- prepare(treatplan, bikesAugust,  varRestriction = newvars)
# Call str() on the treated data
str(bikesJuly.treat)
str(bikesAugust.treat)
# Run xgb.cv to select the best number of trees to use
cv <- xgb.cv(data = as.matrix(bikesJuly.treat),
label = bikesJuly$cnt,
nrounds = 100,
nfold = 5,
objective = "reg:linear", # this is for regression
eta = 0.3,
max_depth = 6,
early_stopping_rounds = 10,
verbose = 0    # silent
)
# Get the evaluation log
elog <- cv$evaluation_log
# Determine and print how many trees minimize training and test error
elog %>%
summarize(ntrees.train = which.min(train_rmse_mean),   # find the index of min(train_rmse_mean)
ntrees.test  = which.min(test_rmse_mean))   # find the index of min(test_rmse_mean)
elog
# Determine and print how many trees minimize training and test error
elog %>%
summarize(ntrees.train = which.min(train_rmse_mean),   # find the index of min(train_rmse_mean)
ntrees.test  = which.min(test_rmse_mean))   # find the index of min(test_rmse_mean) if smaller than training, we should choose it
ntrees <- elog %>%
summarize(ntrees.train = which.min(train_rmse_mean),   # find the index of min(train_rmse_mean)
ntrees.test  = which.min(test_rmse_mean))%>% # find the index of min(test_rmse_mean) if smaller than training, we should choose it
use_series(ntrees.test)
ntrees
bike_model_xgb <- xgboost(data = as.matrix(bikesJuly.treat), # training data as matrix
label = bikesJuly$cnt,  # column of outcomes
nrounds = ntrees,       # number of trees to build
objective = "reg:linear", # objective
eta = 0.3,
depth = 6,
verbose = 0  # silent
)
# Make predictions
bikesAugust$pred <- predict(bike_model_xgb, as.matrix(bikesAugust.treat))
# Plot predictions (on x axis) vs actual bike rental count
ggplot(bikesAugust, aes(x = pred, y = cnt)) +
geom_point() +
geom_abline()
bikesAugust %>%
mutate(instant = (instant - min(instant))/24) %>%  # set start to 0, convert unit to days
gather(key = valuetype, value = value, cnt, pred) %>%
filter(instant < 14) %>% # first two weeks
ggplot(aes(x = instant, y = value, color = valuetype, linetype = valuetype)) +
geom_point() +
geom_line() +
scale_x_continuous("Day", breaks = 0:14, labels = 0:14) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Predicted August bike rentals, Gradient Boosting model")
head(bikesJuly)
head(bikesJuly.treat)
